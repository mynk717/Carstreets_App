import { NextRequest, NextResponse } from 'next/server';
import { AutoContentPipeline } from '@/lib/agents/autoContentPipeline';
import { prisma } from '@/lib/prisma';
import { verifyAdminAuth } from '@/lib/auth/admin';

export async function POST(request: NextRequest) {
  try {
    console.log('🗓️ Generating automated content calendar...');
    
    // Verify admin authorization
    const authResult = await verifyAdminAuth(request);
    if (!authResult.success) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { carIds } = await request.json();

    // Correct Prisma query to check that the images JSON field is not null
    // Then filter out cars with empty images array afterward
    let carsToProcess = [];
    if (carIds && Array.isArray(carIds)) {
      carsToProcess = carIds;
    } else {
      const carResults = await prisma.car.findMany({
        where: {
          images: {
            not: null
          }
        },
        select: { id: true, images: true },
        take: 20,
        orderBy: { createdAt: 'desc' },
      });

      // Filter cars that have at least one image URL in images array
      carsToProcess = carResults
        .filter(car => Array.isArray(car.images) && car.images.length > 0)
        .map(car => car.id)
        .slice(0, 10);
    }
    
    // Generate automated content using your pipeline
    const pipeline = new AutoContentPipeline();
    const readyContent = await pipeline.generateReadyToPostContent(carsToProcess);
    
    // Save generated content to database ContentCalendar table
    const savedContent = await Promise.all(
      readyContent.map(async content => {
        return prisma.contentCalendar.create({
          data: {
            carId: content.carId,
            platform: content.platform,
            textContent: content.textContent,
            hashtags: content.hashtags,
            originalImage: content.originalImage,
            brandedImage: content.imageUrl,
            status: 'draft',
            uniquenessScore: 92,
            generationCost: content.cost,
            autoGenerated: true,
            brandingApplied: ['CarStreets logo', 'Price overlay', 'Raipur location'],
          }
        });
      })
    );

    return NextResponse.json({
      success: true,
      generated: savedContent.length,
      content: savedContent,
      totalCost: readyContent.reduce((sum, item) => sum + item.cost, 0)
    });
    
  } catch (error) {
    console.error('💥 Content calendar generation failed:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}
