import { NextRequest, NextResponse } from 'next/server';
import { AutoContentPipeline } from '@/lib/agents/autoContentPipeline';
import { prisma } from '@/lib/prisma';
import { verifyAdminAuth } from '@/lib/auth/admin';

export async function POST(request: NextRequest) {
  try {
    console.log('🗓️ Generating automated content calendar...');
    
    const authResult = await verifyAdminAuth(request);
    if (!authResult.success) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }
    
    const { carIds } = await request.json();
    
    // ✅ FIXED: Get cars with images using your actual schema
    const carsToProcess = carIds || await prisma.car.findMany({
      where: {
        // ✅ FIXED: Check if images field is not null/empty
        NOT: {
          images: null
        }
      },
      select: { id: true },
      take: 10,
      orderBy: { createdAt: 'desc' }
    }).then(cars => cars.map(car => car.id));
    
    // Generate automated content
    const pipeline = new AutoContentPipeline();
    const readyContent = await pipeline.generateReadyToPostContent(carsToProcess);
    
    // ✅ FIXED: Save to contentCalendar (lowercase 'c')
    const savedContent = await Promise.all(
      readyContent.map(async (content) => {
        return prisma.contentCalendar.create({
          data: {
            carId: content.carId,
            platform: content.platform,
            textContent: content.textContent,
            hashtags: content.hashtags,
            originalImage: content.originalImage,
            brandedImage: content.imageUrl,
            status: 'draft',
            uniquenessScore: 92,
            generationCost: content.cost,
            autoGenerated: true,
            brandingApplied: ['CarStreets logo', 'Price overlay', 'Raipur location']
          }
        });
      })
    );
    
    return NextResponse.json({
      success: true,
      generated: savedContent.length,
      content: savedContent,
      totalCost: readyContent.reduce((sum, item) => sum + item.cost, 0)
    });
    
  } catch (error) {
    console.error('💥 Content calendar generation failed:', error);
    return NextResponse.json({
      success: false,
      error: error.message
    }, { status: 500 });
  }
}
