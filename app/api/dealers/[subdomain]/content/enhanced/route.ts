import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/api/auth/[...nextauth]/route";
import { prisma } from '@/lib/database/db';
import { EnhancedContentPipeline } from '@/lib/agents/enhanced-pipeline';

// Helper: Extract subdomain from request URL
function extractSubdomain(request: NextRequest) {
  const pathParts = request.nextUrl.pathname.split("/");
  return pathParts[pathParts.indexOf("dealers") + 1];
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const subdomain = extractSubdomain(request);

    // Only use existing schema fields!
    const dealer = await prisma.dealer.findUnique({
      where: { subdomain }
    });
    if (!dealer) {
      return NextResponse.json({ error: "Forbidden: Not your dealer" }, { status: 403 });
    }

    const body = await request.json();
    const { 
      dealerId = 'admin', 
      carIds, 
      platforms = ['facebook', 'instagram'],
      saveToCalendar = true 
    } = body;

    console.log('ðŸš€ Enhanced content generation started');

    // Initialize enhanced pipeline
    const enhancedPipeline = new EnhancedContentPipeline();

    // Generate smart content
    const results = await enhancedPipeline.generateSmartContent(
      dealerId,
      carIds,
      platforms
    );

    if (saveToCalendar) {
      for (const result of results.results.filter(r => r.success)) {
        try {
          await prisma.contentCalendar.create({
            data: { 
              dealerId: dealer.id,
              carId: result.carId,
              // Set dealerId field only if it's valid in your model
              // platform, content, and other props as per your schema:
              platform: result.platform,
              textContent: result.content,
              hashtags: result.hashtags || [],
              status: 'draft',
              uniquenessScore: Math.round(result.uniquenessScore || 92),
              generationCost: result.generationCost || 0.035,
              brandingApplied: result.brandingApplied || [],
              autoGenerated: true,
              requiresReview: false
            }
          });
        } catch (error) {
          console.error('Error saving to calendar:', error);
        }
      }
    }

    return NextResponse.json({
      success: true,
      message: 'Enhanced content generation completed',
      data: results,
      enhanced: true,
      pipelineType: 'multi-agent-enhanced',
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    console.error('Enhanced content generation error:', error);
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}
