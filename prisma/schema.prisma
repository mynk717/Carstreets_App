generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Car {
  id               String   @id @default(cuid())
  dealerId         String?
  title            String
  brand            String
  model            String
  variant          String?
  price            BigInt
  year             Int
  fuelType         String
  transmission     String
  kmDriven         Int
  location         String
  images           Json     @default("[]")
  description      String
  sellerType       String
  postedDate       String
  owners           Int
  isVerified       Boolean  @default(false)
  isFeatured       Boolean  @default(false)
  dataSource       String
  olxProfile       String?
  olxProfileId     String?
  originalUrl      String?
  attribution      String?
  carStreetsListed Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  manuallyEdited   Boolean  @default(false)
  editedFields     Json     @default("[]")
  lastScrapedAt    DateTime @default(now())
  isUserAdded      Boolean  @default(false)
  scrapedData      Json?
  availability     String    @default("in_stock")
  countryOfOrigin  String    @default("IN")
  condition        String    @default("used")

  searchVector    String?
  tags            String[] @default([])
  viewCount       Int @default(0)
  leadCount       Int @default(0)
  
  slug            String?
  metaTitle       String?
  metaDescription String?

  contentEmbedding String?
  marketContext    Json?

  contentCalendar ContentCalendar[]
  dealer          Dealer? @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([dealerId, isVerified, carStreetsListed])
  @@index([brand, model, year])
  @@index([price, location])
  @@index([createdAt])
  @@map("cars")
}

model Dealer {
  id                  String   @id @default(cuid())
  name                String
  email               String   @unique
  
  subdomain           String   @unique
  customDomain        String?  @unique
  domainVerified      Boolean  @default(false)
  
  businessName        String?
  logo                String?
  phoneNumber         String?
  location            String?
  description         String?
  
  plan                String   @default("free")
  subscriptionStatus  String   @default("active")
  subscriptionAmount  Int?

  carsCount          Int      @default(0)
  aiContentUsed      Int      @default(0)
  socialPostsUsed    Int      @default(0)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  contentGenerationPreference String?   @default("on_demand")
  
  // WhatsApp Integration
  whatsappBusinessNumber    String?
  whatsappBusinessAccountId String?
  whatsappBusinessVerified  Boolean  @default(false)
  whatsappApiToken          String?
  
  // Meta (Facebook/Instagram) Integration
  facebookPageId            String?
  facebookCatalogId         String?
  metaAccessToken           String?
  metaAccessTokenExpiry     DateTime?
  
  // Weekly AI Content Tracking
  aiContentUsedThisWeek     Int       @default(0)
  aiContentWeekStartDate    DateTime  @default(now())

  // Relations
  cars                Car[]
  contentCalendar     ContentCalendar[]
  whatsappTemplates   WhatsAppTemplate[]
  whatsappContacts    WhatsAppContact[]
  whatsappMessages    WhatsAppMessage[]
  productCatalogs    ProductCatalog[]

  
  @@index([subdomain])
  @@index([customDomain])
}

model MarketIntelligence {
  id            String @id @default(cuid())
  source        String
  title         String
  content       String @db.Text
  summary       String?
  relevantFor   String[]
  sentiment     String?
  credibility   Float @default(0.8)
  
  contentEmbedding String?
  
  publishedAt   DateTime
  scrapedAt     DateTime @default(now())
  isActive      Boolean @default(true)
  
  @@index([source, isActive])
  @@index([publishedAt])
  @@map("market_intelligence")
}

model ContentTemplate {
  id           String @id @default(cuid())
  category     String
  template     String @db.Text
  variables    Json
  performance  Float @default(0.0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("content_templates")
}

model ContentCalendar {
  id       String @id @default(cuid())
  carId    String
  dealerId String?
  platform String

  textContent   String
  hashtags      String[]
  originalImage String?
  brandedImage  String?

  status        String    @default("draft")
  scheduledDate DateTime?
  approvedBy    String?
  approvedAt    DateTime?

  uniquenessScore Int      @default(92)
  generationCost  Float    @default(0.039)
  brandingApplied String[]

  autoGenerated  Boolean @default(true)
  requiresReview Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  generatedImage  String?
  finalImage      String?
  imagePrompt     String?   @db.Text
  rejectionReason String?
  postedAt        DateTime?

  car    Car     @relation(fields: [carId], references: [id], onDelete: Cascade)
  dealer Dealer? @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([dealerId])
  @@index([carId])
  @@index([status])
  @@index([scheduledDate])
}

model SocialMediaToken {
  id            String   @id @default(cuid())
  dealerId      String?
  platform      String
  accessToken   String
  refreshToken  String?
  expiresAt     DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([dealerId])
}

model SocialPost {
  id               String    @id @default(cuid())
  dealerId         String?
  platform         String
  status           String
  scheduledAt      DateTime?
  postedAt         DateTime?
  failureReason    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  @@index([dealerId])
}

model FestivalContent {
  id         String   @id @default(cuid())
  dealerId   String?
  festival   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([dealerId])
}

// ===== WhatsApp Models (Enhanced) =====

model WhatsAppTemplate {
  id          String   @id @default(cuid())
  dealerId    String
  dealer      Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  
  name        String
  language    String   @default("en_US")
  category    String
  status      String   @default("PENDING")
  
  headerType  String?
  headerText  String?
  bodyText    String
  footerText  String?
  buttons     Json?
  
  metaTemplateId String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    WhatsAppMessage[]
  
  @@index([dealerId])
  @@unique([dealerId, name])
}

model WhatsAppContact {
  id          String   @id @default(cuid())
  dealerId    String
  dealer      Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  
  phoneNumber String
  name        String?
  tags        String[] @default([])
  
  optedIn     Boolean  @default(true)
  optedInAt   DateTime @default(now())
  optedOutAt  DateTime?
  
  lastMessageAt DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  messages    WhatsAppMessage[]
  
  @@index([dealerId])
  @@unique([dealerId, phoneNumber])
}

model WhatsAppMessage {
  id          String   @id @default(cuid())
  dealerId    String
  dealer      Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  
  contactId   String?
  contact     WhatsAppContact? @relation(fields: [contactId], references: [id], onDelete: SetNull)
  
  templateId  String?
  template    WhatsAppTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  
  phoneNumber String
  messageType String
  content     String
  
  status      String   @default("queued")
  messageId   String?
  error       String?
  
  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([dealerId])
  @@index([contactId])
  @@index([status])
}

model ProductCatalog {
  id                String   @id @default(cuid())
  dealerId          String
  dealer            Dealer   @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  
  // Meta Catalog Info
  metaCatalogId     String?  // Facebook Commerce Manager Catalog ID
  catalogName       String
  catalogType       String   @default("automotive") // automotive, products
  
  // Sync Status
  status            String   @default("pending") // pending, syncing, synced, failed
  lastSyncedAt      DateTime?
  itemCount         Int      @default(0)
  syncError         String?
  
  // Feed URLs
  xmlFeedUrl        String?  // For Google Vehicle Ads
  csvFeedUrl        String?  // For Meta bulk upload
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([dealerId])
  @@unique([dealerId, metaCatalogId])
}
